------
Installer ROS Environnment sur Ubuntu
http://wiki.ros.org/noetic/Installation/Ubuntu
------

sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'

sudo apt install curl # if you haven't already installed curl
curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -

sudo apt update

sudo apt install ros-noetic-desktop-full

apt search ros-noetic

source /opt/ros/noetic/setup.bash

echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc
source ~/.bashrc

---------
dependencies
---------

sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential

sudo apt install python3-rosdep

sudo rosdep init
rosdep update
---------
Dossier ROS
---------

printenv | grep ROS

#You will need to run this command on every 
#new shell you open to have access to the ROS commands, 
#unless you add this line to your .bashrc.

source /opt/ros/noetic/setup.bash

#create and build a catkin workspace

mkdir -p ~/catkin_ws/src
cd ~/catkin_ws/
catkin_make

source devel/setup.bash

echo $ROS_PACKAGE_PATH

-------
Navigating the ROS Filesystem
Noetic + catkin
-------

sudo apt-get install ros-noetic-ros-tutorials

#rospack allows you to get information about packages. 
rospack find [package_name]

rospack find roscpp

#roscd is part of the rosbash suite. It allows you to change directory (cd) directly to a package or a stack
roscd <package-or-stack>[/subdir]

rappel : pwd -> Print Working Directory (shell builtin) 

roscd roscpp
pwd

#Remarque : Note that roscd, like other ROS tools, will only find 
#ROS packages that are within the directories listed in your ROS_PACKAGE_PATH

echo $ROS_PACKAGE_PATH
roscd roscpp/cmake
pwd

#roscd log will take you to the folder where ROS stores log files. Note that if you have not run any 
#ROS programs yet, this will yield an error saying that it does not yet exist.
roscd log

#rosls is part of the rosbash suite. It allows you to ls directly in a package by name rather than by absolute path.
rosls <package-or-stack>[/subdir]


rosls roscpp_tutorials
roscd turtle

-----
Creating a ROS Package
-----
'For a package to be considered a catkin package it must meet a few requirements:

    The package must contain a catkin compliant package.xml file.
        That package.xml file provides meta information about the package. 

    The package must contain a CMakeLists.txt which uses catkin.

        If it is a catkin metapackage it must have the relevant boilerplate CMakeLists.txt file. 
    Each package must have its own folder
        This means no nested packages nor multiple packages sharing the same directory. 

The simplest possible package might have a structure which looks like this:

    my_package/
      CMakeLists.txt
      package.xml
'
catkin_create_pkg <package_name> [depend1] [depend2] [depend3]
#create #create a new package called '<package_name>  which depends on depend1, depend2, and depend3

/!\ rajouter -m user pour que ça marche : the -m option force an author name

catkin_create_pkg -m leslie beginner_tutorials std_msgs rospy roscpp

#build the packages in the catkin workspace
cd ~/catkin_ws
catkin_make

#add the workspace to your ROS environment you need to source the generated setup file
. ~/catkin_ws/devel/setup.bash

#rospack add the workspace to your ROS environment you need to source the generated setup file
rospack depends1 beginner_tutorials 
roscd beginner_tutorials
cat package.xml
rospack depends1 rospy
rospack depends beginner_tutorials

----
Building a ROS Package
----
#catkin_make is a command line tool which adds some convenience to the standard catkin workflow. You can imagine that 
#catkin_make combines the calls to cmake and make in the standard CMake workflow. 
catkin_make [make_targets] [-DCMAKE_VARIABLES=...]

# In a catkin workspace
catkin_make
catkin_make install  # (optionally)

#The above commands will build any catkin projects found in the src folder. This follows the
#recommendations set by REP128.
#if your source code is in a different place, say my_src then you would call catkin_make like this:

catkin_make --source my_src
catkin_make install --source my_src  # (optionally)

----
ROS Nodes 
----

#A node really isn't much more than an executable file within a ROS package. ROS nodes use a ROS client library 
#to communicate with other nodes. Nodes can publish or subscribe to a Topic. Nodes can also provide or use a Service. 

#rospy = python client library
#roscpp = c++ client library 

#Première chose à run
roscore

#Affiche les nodes active
rosnode list

#rosnode info command returns information about a specific node
rosnode info [La node]

#rosrun allows you to use the package name to directly run a node within a package 
#(without having to know the package path).

rosrun [package_name] [node_name]

#Remapping Argument to change the node's name

rosnode ping my_turtle

---
Ros topic
---
#rqt_graph creates a dynamic graph of what's going on in the system. rqt_graph is part of the rqt package

sudo apt-get install ros-<distro>-rqt
sudo apt-get install ros-<distro>-rqt-common-plugins

The rostopic tool allows you to get information about ROS topics
rostopic bw     display bandwidth used by topic
rostopic echo   print messages to screen
rostopic hz     display publishing rate of topic    
rostopic list   print information about active topics
rostopic pub    publish data to topic : rostopic pub [topic] [msg_type] [args]
rostopic type   print topic type

Rappel : on peut faire rostopic argument -h pour savoir quel arguments donner

rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'
Explication :
This command will publish messages to a given topic:

rostopic pub

This option (dash-one) causes rostopic to only publish one message then exit:

 -1 

This is the name of the topic to publish to:

/turtle1/cmd_vel

This is the message type to use when publishing to the topic:

geometry_msgs/Twist

This option (double-dash) tells the option parser that none of the following arguments is an option. This is required in cases where your arguments have a leading dash -, like negative numbers.

--

As noted before, a geometry_msgs/Twist msg has two vectors of three floating point elements each: linear and angular. In this case, '[2.0, 0.0, 0.0]' becomes the linear value with x=2.0, y=0.0, and z=0.0, and '[0.0, 0.0, 1.8]' is the angular value with x=0.0, y=0.0, and z=1.8. These arguments are actually in YAML syntax, which is described more in the YAML command line documentation.

'[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]' 

You may have noticed that the turtle has stopped moving; this is because the turtle requires a steady stream of commands at 1 Hz to keep moving. We can publish a steady stream of commands using rostopic pub -r command:

rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]'

#rqt_plot displays a scrolling time plot of the data published on topics. Here we'll use rqt_plot 
#to plot the data being published on the /turtle1/pose topic. First, start rqt_plot by typing
rosrun rqt_plot rqt_plot

#dd any topic to the plot. Typing /turtle1/pose/x will highlight the plus button, previously disabled

----
Understanding ROS Services and Parameters
----

#rosservice can easily attach to ROS's client/service framework with services. rosservice has many commands 
#that can be used on services ( rosservice list)

rosservice list         print information about active services
rosservice call         call the service with the provided args : rosservice call [service] [args]
rosservice type         print service type
rosservice find         find services by service type
rosservice uri          print service ROSRPC uri

rosparam allows you to store and manipulate data on the ROS Parameter Server. The Parameter Server can store 
integers, floats, boolean, dictionaries, and lists. rosparam uses the YAML markup language for syntax. In 
simple cases, YAML looks very natural: 1 is an integer, 1.0 is a float, one is a string, true is a boolean, 
[1, 2, 3] is a list of integers, and {a: b, c: d} is a dictionary. rosparam has many commands that can be used 
on parameters, as shown below

rosparam set            set parameter
rosparam get            get parameter
rosparam load           load parameters from file
rosparam dump           dump parameters to file
rosparam delete         delete parameter
rosparam list           list parameter names

---
ROSLAUNCH
---
roslaunch starts nodes as defined in a launch file. 
roslaunch [package] [filename.launch]

rappel mkdir créé un fichier

Text type 
 <launch>

   <group ns="turtlesim1">
   <node pkg="turtlesim" name="sim" type="turtlesim_node"/>
   </group>

   <group ns="turtlesim2">
      <node pkg="turtlesim" name="sim" type="turtlesim_node"/>
   </group>

   <node pkg="turtlesim" name="mimic" type="mimic">
    <remap from="input" to="turtlesim1/turtle1"/>
    <remap from="output" to="turtlesim2/turtle1"/>
   </node>
   
</launch>

----
Rosed edit files in ROS
----

#rosed is part of the rosbash suite. It allows you to directly edit a file within a package by using the 
#package name rather than having to type the entire path to the package. 
rosed [package_name] [filename]



---
La commande à faire h24
---

source /opt/ros/%YOUR_ROS_DISTRO%/setup.bash
source ~/catkin/devel/setup.bash

----
Remarque pour le github
----

pour recreer l'environnement pkg sur son ordi 
il faut suppr les fichiers cmakelists et package.xml du dossier que l'on veut en pkg puis 
on fait la commande create pkg puis on retourne sur le ws pour faire catkin_make puis on fait 
la cmd . ~/catkin-ws/devel/setup.bash
